{"version":3,"sources":["utils/GlobalState.js","components/ProtectedRoute.js","utils/authentication.js","components/Container/index.js","components/Navbar/index.js","pages/Homepage/index.js","pages/About/index.js","components/Card/index.js","pages/Sign Up/index.js","pages/Sign In/index.js","pages/Forgot-Password/index.js","components/ModalColumn/index.js","pages/UserProfile/index.js","components/CardPlaceHolder/index.js","utils/ItemTypes.js","components/GameCard/index.js","components/InfoCard/index.js","components/CardHolder/index.js","components/UserGameInformation/index.js","components/GameBoard/gameLogic.js","components/GameBoard/cardScript.js","components/GameBoard/index.js","pages/Lobby/index.js","pages/HowToPlay/index.js","App.js","index.js"],"names":["AuthContext","createContext","Provider","AuthProvider","props","useState","auth","setAuth","value","children","useAuthContext","useContext","ProtectedRoute","Component","component","rest","render","to","pathname","state","from","location","saveAuthLocally","data","localStorage","setItem","JSON","stringify","Container","className","Navbar","getItem","avatar","setAvatar","userId","parse","_id","useEffect","axios","get","then","res","catch","err","console","log","type","id","data-toggle","aria-haspopup","aria-expanded","src","alt","aria-labelledby","onClick","post","removeItem","window","Homepage","About","class","Card","bodyId","SignUp","username","email","password","secondPassword","validateFunc","event","preventDefault","anyErrors","displayError","length","match","submitFunc","inputFunc","target","name","document","getElementById","classList","contains","removeError","setState","errorMessage","add","style","borderColor","innerHTML","setTimeout","remove","replace","onSubmit","this","htmlFor","placeholder","onChange","SignIn","setUserName","userpass","setUserPass","ForgotPassword","ModalColumn","changeFunc","imgData","imageString","UserProfile","selectAvatar","setSelectAvatar","setSelectDeck","wins","setWins","losses","setLosses","history","useHistory","showAvatar","setShowAvatar","handleCloseAvatar","showDeck","setShowDeck","handleCloseDeck","avatarArr","getAttribute","push","Modal","show","onHide","Body","map","avatars","i","key","Footer","Button","variant","put","reload","role","aria-label","CardPlaceHolder","Array","cardCount","card","GameCard","useDrag","item","ItemTypes","uId","drag","preview","DragPreviewImage","connect","img","ref","resourceCost","trim","effect","marginBottom","position","top","fontSize","isCreature","attack","health","InfoCard","CardHolder","CardContext","cardDraggedToPosition","playerDeck","filter","heldCards","setHeldCards","override","useDrop","accept","drop","playerInfo","UserGameInformation","lifeState","enemyAtkRows","enemyDefRows","userAtkRows","userDefRows","springDeck","summerDeck","fallDeck","winterDeck","duplicate","array","tempDeck","newDeck","j","cardId","copyDeck","el","deckChoice","deckC","shuffleArray","max","min","randomIndex1","Math","floor","random","randomIndex2","tempElement","assignHand","deck","inOpponentRows","includes","isPositionFilled","isOpponentPositionFilled","opponentData","damageCard","damage","cardDied","hasAvailableCards","findFirstAvailableCards","availableCardIndices","foundCards","isInDefenseRow","getCardInPosition","countAllCardsInPosition","occurs","getPlayedCards","playedCards","compareCards","ourData","ourDeck","theirCard","ourCard","clamp","num","a","b","getCardWithId","triggers","operators","targettingOperators","positions","tokenize","string","splitString","split","tokens","currentToken","currentOperator","currentParameter","word","trigger","operations","op","getScriptTargets","operation","param1","slice","canInstaCast","operator","GameBoard","GameContext","socket","gameId","playerNumber","baseAttack","baseHealth","onPlayEffect","onDeathEffect","onAttackEffect","Parser","effectScript","setPlayerDeck","isPlayersTurn","hasInitiated","currentResource","lifeTotal","playerData","setPlayerData","updateSwitch","setUpdateSwitch","effectData","setEffectData","opponentPlayAreaCount","opponentHasDeck","userDef1","userDef2","userAtt1","userAtt2","userAtt3","opponentLifeTotal","opponentBoardData","setOpponentBoardData","emit","otherDeck","otherData","player","off","on","boardData","opponentCards","GameLogic","playAreaCount","newPlayerData","deadCards","deadCard","instantCastOperation","fromPlayer","prevState","tempData","drawCards","copy","castEffect","destinationPosition","cardVal","currentOperation","destinationCard","parseInt","param2","increaseEffectOperation","handleCardDeath","effectParam","moveCard","attackCard","cardCopy","useDeck","currentResources","handCount","canDraw","indices","attackingCardPosition","attackedPosition","attackingCard","attackEffect","cardIndex","findIndex","DndProvider","backend","HTML5Backend","resource","lifeStateSet","ENDPOINT","process","PORT","Lobby","handleChangeJoinId","showJoin","createNewGame","room","ceil","joinLobby","setThisPlayersInfo","joinedLobby","startMatch","sendPlayerInfo","info","showModal","number","updatePlayerInfo","username1","avatar1","joined1","joined2","allJoined","username2","avatar2","startBtnRow","gameIdRow","mainCard","addEventListener","display","playGame","checkUser","exitGame","cleanUpPlayer","socketIO","disconnect","HowToPlay","App","authLoading","setAuthLoading","getAuthLocally","exact","path","Signin","ReactDOM"],"mappings":"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","file":"static/js/main.5c77bb2c.chunk.js","sourcesContent":["import React, { createContext, useContext, useState} from 'react';\n\nconst AuthContext = createContext();\nconst { Provider } = AuthContext;\n\nconst AuthProvider = (props) => {\n    const [auth, setAuth] = useState(null);\n\n    return <Provider value={[auth, setAuth]}>{props.children}</Provider>\n};\n\nconst useAuthContext =() => {\n    return useContext(AuthContext);\n};\n\nexport {AuthProvider, useAuthContext};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {useAuthContext} from '../utils/GlobalState'\n\n\nconst ProtectedRoute =({ component: Component, ...rest}) => {\n  const[auth,] = useAuthContext(null)\n\n  return (\n    <Route {...rest} render={\n      props => {\n        if (auth) {\n          return <Component {...rest} {...props} />\n        } else {\n          return <Redirect to={\n            {\n              pathname: '/SignIn',\n              state: {\n                from: props.location\n              }\n            }\n          } />\n        }\n      }\n    } />\n  )\n}\n    \nexport default ProtectedRoute;","\nexport function logout() {\n  // api call to log out session\n  localStorage.removeItem('authentication');\n}\n\nexport function getAuthLocally() {\n  let auth = JSON.parse(localStorage.getItem('authentication'));\n  if (auth) {\n    return auth;\n  }\n  return null;\n}\nexport function saveAuthLocally(data) {\n  localStorage.setItem('authentication', JSON.stringify(data));\n}\n","import React from 'react';\n\nfunction Container(props) {\n    return <div className='container' {...props} />;\n}\n\nexport default Container;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuthContext } from '../../utils/GlobalState';\nimport axios from 'axios';\n\nimport './navbar.css';\n\nfunction Navbar() {\n    const [auth,] = useAuthContext();\n    const [avatar, setAvatar] = useState(localStorage.getItem('avatar'));\n\n    let userId = null;\n\n    if (localStorage.getItem('authentication') != null) {\n        userId = JSON.parse(localStorage.getItem('authentication'))._id;\n    }\n\n    useEffect(() => {\n        if (userId != null && avatar == null) {\n            axios.get(`/api/user/${userId}`)\n            .then(res => {\n                localStorage.setItem('avatar', res.data.avatar);\n                setAvatar(localStorage.getItem('avatar'));\n            })\n            .catch(err => console.log(err));\n        }\n        \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    function logoutFunc() {\n        axios.post('/api/logout').then(res => {\n            localStorage.removeItem('authentication');\n            localStorage.removeItem('avatar');\n            localStorage.removeItem('username');\n            window.location = '/';\n        })\n        .catch(err => console.log(err));\n    }\n    \n    return (\n        <nav>\n            <Link to='/'>\n                <h3>Change of Seasons</h3>\n            </Link>\n            <Link to='/HowToPlay'>\n                <h3>How to Play?</h3>\n            </Link>\n                {auth ? (\n                    <div className='dropleft'>\n                        <button className='btn' type='button' id='dropdownMenuButton' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>\n                            {avatar == null ? (\n                                <img src='https://via.placeholder.com/40' alt='Profile Icon' id='userProfileIcon' />\n                            ) : (\n                                <img src={`./images/cardImg/${avatar}`} alt='Profile Icon' id='userProfileIcon' />\n                            )}\n                        </button>\n                        <div className='dropdown-menu' aria-labelledby='dropdownMenuButton'>\n                            <Link className='dropdown-item' to='/Profile'>Profile</Link>\n                            <button className='dropdown-item' onClick={logoutFunc}>Logout</button>\n                        </div>\n                    </div>\n                ) : (\n                    <div className='dropleft'>\n                        <button className='btn dropdownBtn' type='button' id='dropdownMenuButton' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>\n                            <i className='fas fa-user'></i>\n                        </button>\n                        <div className='dropdown-menu' aria-labelledby='dropdownMenuButton'>\n                            <Link className='dropdown-item' to='/Signup'>Sign Up</Link>\n                            <Link className='dropdown-item' to='/Signin'>Sign In</Link>\n                        </div>\n                    </div>\n                )}\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuthContext } from '../../utils/GlobalState';\n\nimport Container from '../../components/Container/index';\nimport Navbar from '../../components/Navbar/index';\n\n\nimport './homepage.css';\n\nfunction Homepage() {\n    const [auth, ] = useAuthContext();\n\n    return (\n        <div>\n            <Navbar />\n            <h1 className=' cosHome animate__animated animate__slideInDown'>Change of Seasons</h1>\n\n            <Container>\n                <div className='card animate__animated animate__slideInDown home-card'>\n                    <div className='card-body'>\n                        {/* <img src='./images/buddy.png' alt='placeholder' className='homeImg'></img> */}\n\n                        {!auth ? (    \n                            <div className='btnRow'>\n                                <Link  to='/Signup'> <button className='wood'>Sign up</button></Link>\n                                <Link to='/Signin'><button className='wood'>Sign in</button></Link>\n                            </div>\n                        ) : (\n                            <div className='btnRow'>\n                                <Link  to='/Profile'> <button className='wood'>Profile</button></Link>\n                                <Link to='/Lobby'><button className='wood'>Play!</button></Link>\n                            </div>\n                        )}\n                    </div>\n               </div>\n            </Container>\n        </div>\n    )\n}\n\nexport default Homepage;","import React from 'react';\n\n\nimport './about.css';\n\nfunction About() {\n    return (\n      \n        <div>\n            <div>\n                <span class=\"resourceCircle\" id='resource1'></span>\n                <span class=\"resourceCircle\" id='resource2'></span>\n                <span class=\"resourceCircle\" id='resource3'></span>\n                <span class=\"resourceCircle\" id='resource4'></span>\n                <span class=\"resourceCircle\" id='resource5'></span>\n                <span class=\"resourceCircle\" id='resource6'></span>\n                <span class=\"resourceCircle\" id='resource7'></span>\n                <span class=\"resourceCircle\" id='resource8'></span>\n                <span class=\"resourceCircle\" id='resource9'></span>\n           \n            </div>\n        </div>\n    )\n}\n\nexport default About;","import React from 'react';\nimport './card.css'\n\nfunction Card(props) {\n    return (\n        <div className='card' id={props.id}>\n            <div className='card-body' id={props.bodyId || ''}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { saveAuthLocally } from '../../utils/authentication'\nimport Container from '../../components/Container/index';\nimport Card from '../../components/Card/index';\nimport Navbar from '../../components/Navbar/index';\n\n\nimport './signUp.css';\n\nclass SignUp extends Component {\n    state = {\n        username: '',\n        email: '',\n        password: '',\n        secondPassword: ''\n    }\n\n    validateFunc = event => {\n        event.preventDefault();\n\n        let anyErrors = false;\n\n        const defaultMessage = '* Cannot be empty';\n\n        const username = this.state.username;\n        const email = this.state.email;\n        const password = this.state.password;\n        const secondPassword = this.state.secondPassword;\n        \n        // Username validation\n        if (username === '') {\n            this.displayError('username', defaultMessage);\n            anyErrors = true;\n        } else if (username.length < 3 || username.length > 20) {\n            this.displayError('username', '* Username must be between 3 and 20 characters');\n            anyErrors = true;\n        }\n\n        // Email validation\n        if (email === '') {\n            this.displayError('email', defaultMessage);\n            anyErrors = true;\n        }\n        \n        // eslint-disable-next-line\n        else if (!email.match(/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/)) {\n            this.displayError('email', '* Not valid email address.');\n            anyErrors = true;\n        }\n\n        // Password validation\n        if (password === '') {\n            this.displayError('password', defaultMessage);\n            anyErrors = true;\n        } else if (password.length < 6 || password.length > 128) {\n            this.displayError('password', '* Password must be between 6 and 128 characters');\n            anyErrors = true;\n        }\n        \n        // secondPassword validation\n        if (secondPassword === '') {\n            this.displayError('secondPassword', defaultMessage);\n            anyErrors = true;\n        } else if (password !== secondPassword) {\n            this.displayError('secondPassword', '* Passwords do not match');\n            anyErrors = true;\n        }\n\n        // If there are no errors then run the submit function\n        if (!anyErrors) {\n            this.submitFunc();\n        }\n    }\n\n    submitFunc = () => {\n        axios.post('/api/register', {username:this.state.username, password: this.state.password, email: this.state.email})\n        .then(res => {\n            localStorage.removeItem('authentication');\n            localStorage.removeItem('avatar');\n            saveAuthLocally(res.data);\n            window.location = '/Profile';\n        });\n    }\n\n    inputFunc = event => {\n        const { name, value } = event.target;\n        const errorCheck = document.getElementById(name).classList;\n\n        if (errorCheck.contains('error')) {\n            this.removeError(name);\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    displayError = (name, errorMessage) => {\n        // This will make the input's border color red and add a horizontal shaking animation\n        document.getElementById(name).classList.add('animate__animated', 'animate__shakeX', 'error');\n        document.getElementById(name).style.borderColor = 'red';\n\n        // This will display the error message using a fade in animation\n        document.getElementById(name + 'Error').classList.add('animate__animated', 'animate__fadeIn');\n        document.getElementById(name + 'Error').innerHTML = errorMessage;\n\n        // After 600 milliseconds this will remove the shaking animation class from the element \n        setTimeout(() => {\n            document.getElementById(name).classList.remove('animate__animated', 'animate__shakeX');\n        }, 1000);\n    }\n\n    removeError = name => {\n        // This will reset the input's border color to black and fade out the error message\n        document.getElementById(name).style.borderColor = 'black';\n        document.getElementById(name + 'Error').classList.replace('animate__fadeIn', 'animate__fadeOut');\n\n        // After 600 milliseconds this will remove the fade out class from the error message and reset the error message back to blank\n        setTimeout(() => {\n            document.getElementById(name + 'Error').classList.remove('animate__animated', 'animate__fadeOut');\n            document.getElementById(name + 'Error').innerHTML = '';\n        }, 600);\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar />\n\n                <Container className='animate__animated animate__zoomIn'>\n\n                    <Card id='signUpCard'>\n                        <h2 className='signUpTitle'>Sign Up for Change of Seasons!</h2>\n\n                        <hr />\n\n                        <form onSubmit={this.validateFunc}>\n                            {/* Enter username */}\n                            <div className='form-group input-header'>\n                                <label htmlFor='userInputUsername'>Username</label>\n                                <p id='usernameError' className='errorMessage'></p>\n                                <input\n                                    type='username'\n                                    name='username'\n                                    id='username'\n                                    className='form-control'\n                                    placeholder='Enter a username'\n                                    onChange={this.inputFunc}\n                                    value={this.state.username}\n                                />\n                            </div>\n\n                            {/* Enter Email */}\n                            <div className='form-group input-header'>\n                                <label htmlFor='userInputEmail'>Email address</label>\n                                <p id='emailError' className='errorMessage'></p>\n                                <input\n                                    type='email'\n                                    name='email'\n                                    id='email'\n                                    className='form-control'\n                                    placeholder='Enter your email'\n                                    onChange={this.inputFunc}\n                                    value={this.state.email}\n                                />\n                            </div>\n\n                            {/* Enter Password */}\n                            <div className='form-group input-header'>\n                                <label htmlFor='userInputPassword'>Password</label>\n                                <p id='passwordError' className='errorMessage'></p>\n                                <input\n                                    type='password'\n                                    name='password'\n                                    id='password'\n                                    className='form-control'\n                                    placeholder='Enter a password'\n                                    onChange={this.inputFunc}\n                                    value={this.state.password}\n                                />\n                            </div>\n\n                            {/* Re-enter Password */}\n                            <div className='form-group input-header'>\n                                <label htmlFor='userInputPassword input-header'>Re-enter Password</label>\n                                <p id='secondPasswordError' className='errorMessage'></p>\n                                <input\n                                    type='password'\n                                    name='secondPassword'\n                                    className='form-control'\n                                    id='secondPassword'\n                                    placeholder='Re-enter your password'\n                                    onChange={this.inputFunc}\n                                    value={this.state.secondPassword}\n                                />\n                            </div>\n\n                            <button type='submit' className='wood animate__animated animate__bounceIn' id='signUpButton' onClick={this.validateFunc}>Sign Up!</button>\n                        </form>\n                    </Card>\n\n                    <p id='alreadyHave' className='animate__animated animate__fadeIn animate__delay-2s'>Already have an account? <Link id='clickHere' to='/Signin'>Click here to sign in!</Link></p>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default SignUp;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useAuthContext } from '../../utils/GlobalState'\nimport Container from '../../components/Container/index';\nimport Card from '../../components/Card/index';\nimport Navbar from '../../components/Navbar/index';\nimport { saveAuthLocally } from '../../utils/authentication'\nimport './signIn.css';\n\nfunction SignIn() {\n    const [username, setUserName] = useState('');\n    const [userpass, setUserPass] = useState('');\n    const [, setAuth] = useAuthContext();\n\n    function validateFunc(event) {\n        event.preventDefault();\n\n        let anyErrors = false;\n\n\n        // Username validation\n        if (username === '') {\n            displayError('username', '* Cannot be empty');\n            anyErrors = true;\n        }\n\n        // Password validation\n        if (userpass === '') {\n            displayError('password', '* Cannot be empty');\n            anyErrors = true;\n        }\n\n        if (!anyErrors) {\n            submitFunc();\n        }\n    }\n\n    function submitFunc () {\n        axios.post ('/api/login', {username:username, password: userpass})\n        .then(res => {\n            localStorage.removeItem('authentication');\n            localStorage.removeItem('avatar');\n            setAuth(res.data);\n            saveAuthLocally(res.data);\n            window.location = '/Profile';\n        });\n    }\n\n    function inputFunc(event) {\n        const { name, value } = event.target;\n\n        if (event.target.classList.contains('error')) {\n            removeError(name);\n        }\n        \n        if (name === 'username'){\n            setUserName(value)\n        }\n        else {\n            setUserPass(value)\n        }\n    }\n\n    function displayError(name, errorMessage) {\n        // This will make the input's border color red and add a horizontal shaking animation\n        document.getElementById(name).classList.add('animate__animated', 'animate__shakeX', 'error');\n        document.getElementById(name).style.borderColor = 'red';\n\n        // This will display the error message using a fade in animation\n        document.getElementById(name + 'Error').classList.add('animate__animated', 'animate__fadeIn');\n        document.getElementById(name + 'Error').innerHTML = errorMessage;\n\n        // After 600 milliseconds this will remove the shaking animation class from the element \n        setTimeout(() => {\n            document.getElementById(name).classList.remove('animate__animated', 'animate__shakeX');\n        }, 1000);\n    }\n\n    function removeError(name) {\n        // This will reset the input's border color to black and fade out the error message\n        document.getElementById(name).style.borderColor = 'black';\n        document.getElementById(name + 'Error').classList.replace('animate__fadeIn', 'animate__fadeOut');\n\n        // After 600 milliseconds this will remove the fade out class from the error message and reset the error message back to blank\n        setTimeout(() => {\n            document.getElementById(name + 'Error').classList.remove('animate__animated', 'animate__fadeOut');\n            document.getElementById(name + 'Error').innerHTML = '';\n        }, 600);\n    }\n\n    return (\n        <div>\n            <Navbar />\n\n            <Container className='animate__animated animate__zoomIn'>\n\n                <Card id='signInCard'>\n                    <h2 className='signInTitle'>Sign In to Change of Seasons!</h2>\n\n                    <hr />\n\n                    <form onSubmit={validateFunc}>\n                        {/* Enter username */}\n                        <div className='form-group input-header'>\n                            <label htmlFor='userInputusername'>Username</label>\n                            <p id='usernameError' className='errorMessage'></p>\n                            <input\n                                type='text'\n                                name='username'\n                                id='username'\n                                className='form-control'\n                                placeholder='Enter your username'\n                                onChange={inputFunc}\n                                value={username}\n                            />\n                        </div>\n\n                        {/* Enter Password */}\n                        <div className='form-group input-header'>\n                            <label htmlFor='userInputPassword'>Password</label>\n                            <p id='passwordError' className='errorMessage'></p>\n                            <input\n                                type='password'\n                                name='password'\n                                id='password'\n                                className='form-control'\n                                placeholder='Enter a password'\n                                onChange={inputFunc}\n                                value={userpass}\n                            />\n                        </div>\n                        <button type='submit' className='wood animate__animated animate__bounceIn' id='signUpButton' onClick={validateFunc}>Sign In!</button>\n                    </form>\n                </Card>\n\n                <p id='dontHave' className='animate__animated animate__fadeIn animate__delay-2s'>Don't have an account yet? <Link className='clickHere' to='/Signup'>Click here to sign up!</Link></p>\n\n                <p id='forgot' className='animate__animated animate__fadeIn animate__delay-2s'>Forgot your password? <Link to='Forgot' className='clickHere'>Click here to reset it!</Link></p>\n            </Container>\n        </div>\n    )\n\n} \n\n\nexport default SignIn;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Container from '../../components/Container/index';\nimport Card from '../../components/Card/index';\nimport Navbar from '../../components/Navbar/index';\n\nimport './forgotPassword.css';\n\nclass ForgotPassword extends Component {\n    state = {\n        email: ''\n    }\n\n    inputFunc = event => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    submitFunc = event => {\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar />\n                \n                <Container>\n                    <Card id='forgotPasswordCard'>\n                        <form onSubmit={this.submitFunc}>\n                            <h2>Enter your email address below</h2>\n\n                            <div className='form-group'>\n                                <input \n                                    type='email'\n                                    name='email'\n                                    id='email'\n                                    className='form-control'\n                                    placeholder='Enter your email'\n                                    onChange={this.inputFunc}\n                                    value={this.state.email}\n                                />\n                            </div>\n\n                            <button type='submit' className='btn btn-primary' id='resetPasswordButton'>\n                                Reset password\n                            </button>\n                        </form>\n                    </Card>\n\n                    <p id='signIn'>Need to Sign in? <Link className='clickHere' to='/Signin'>Click here to go to the Sign in page!</Link></p>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default ForgotPassword;","import React from 'react';\nimport './modal.css';\n\n\nfunction ModalColumn(props) {\n  return (\n    <button onClick={props.changeFunc}>\n      <img className='userProfileIcons' data={props.imgData} src={`./images/cardImg/${props.imageString}.png`} alt='Avatar Icon'/>\n    </button>\n  )\n}\n\nexport default ModalColumn;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n//Will be used to go to card lists and deck builder ~possibly friends list if implimented\n// import { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport Container from '../../components/Container/index';\nimport Navbar from '../../components/Navbar/index';\nimport ModalColumn from '../../components/ModalColumn/index'\n// import button from './Images/woodsign.png';\n\n//reactstrap \nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport './userProfile.css';\n\nfunction UserProfile() {\n    const [username,] = useState((localStorage.getItem('username')));\n    //used to grab the current chosen avatar from the db \n\n    const [avatar, setAvatar] = useState('');\n\n    //used for when a user is selecting a new avatar \n    const [selectAvatar, setSelectAvatar] = useState('');\n    const [, setSelectDeck] = useState('');\n    const [wins, setWins] = useState(0);\n    const [losses, setLosses] = useState(0);\n    const history = useHistory();\n\n    //code for Avatar Modal \n    const [showAvatar, setShowAvatar] = useState(false);\n\n    const handleCloseAvatar = () => {\n        setShowAvatar(false);\n        setSelectAvatar('');\n    }\n\n    const handleShowAvatar = () => setShowAvatar(true);\n\n    //code for Deck Modal \n    const [showDeck, setShowDeck] = useState(false);\n\n    const handleCloseDeck = () => {\n        setShowDeck(false);\n        setSelectDeck('');\n    }\n\n    const handleShowDeck = () => setShowDeck(true);\n\n    useEffect(() => {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n\n        axios.get(`/api/user/${userId}`)\n            .then(res => {\n                setWins(res.data.wins);\n                setLosses(res.data.losses);\n                localStorage.setItem('avatar', res.data.avatar);\n                localStorage.setItem('username', res.data.username);\n                setAvatar(localStorage.getItem('avatar'));\n            });\n    }, []);\n\n    //Array for avatar images \n    const avatarArr = ['bird_01', 'dark_knight_01', 'cyclop_01', 'ghost_01', 'joker_01', 'orc_05', 'living_armor_02', 'owl_01', 'ash_zombies', 'crystal_golem_01', 'dragon_08', 'dragon_09', 'dragon_07', 'phoenix_01', 'skeleton_06'];\n\n\n    function changeFunc(event) {\n        setSelectAvatar(event.target.getAttribute('data'));\n    };\n\n    //saves the users Avatar from the selection \n    function saveFuncAvatar() {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n\n        axios.put(`/api/user/${userId}/avatar/${selectAvatar}.png`)\n            .then(() => {\n                localStorage.setItem('avatar', selectAvatar + '.png');\n                window.location.reload();\n            })\n            .catch(err => console.log(err));\n    }\n\n    function selectSpring() {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n        axios.put(`/api/user/${userId}/deck/Spring`);\n        handleCloseDeck();\n    };\n    function selectSummer() {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n        axios.put(`/api/user/${userId}/deck/Summer`);\n        handleCloseDeck();\n    };\n    function selectFall() {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n        axios.put(`/api/user/${userId}/deck/Fall`);\n        handleCloseDeck();\n    };\n    function selectWinter() {\n        const userId = JSON.parse(localStorage.getItem('authentication'))._id;\n        axios.put(`/api/user/${userId}/deck/Winter`);\n        handleCloseDeck();\n    };\n\n    function goToLobby() {\n        history.push('/Lobby');\n    }\n\n    return (\n        <div>\n            <Navbar />\n            <Container>\n                <div className='card animate__animated animate__slideInDown profileCard '>\n                    <div className='card-body row'>\n\n                        <div className='user-avatar col-4'>\n                            <h2 className='profileUserName'>{username}</h2>\n                            <div className='avatarContainer'>\n                                <img src={`./images/cardImg/${avatar}`} alt=\"Player's Chosen Avatar\" className='avatarUserProfile' />\n                                <button className='chooseAvatar' onClick={handleShowAvatar}>Change Avatar</button>\n                            </div>\n                            {/* open the modal to select an Avatar */}\n                           \n                            <div >\n                                <p className='stats-div'>Wins: {wins} Losses: {losses} </p>\n                            </div>\n                        </div>\n\n                        <div className='user-links col-4 my-auto'>\n                            <div className='button-col'>\n                                <button className='woodProfileButton' onClick={handleShowDeck}>Choose Deck</button>\n                                <br></br>\n                                <br></br>\n                                <button className='woodProfileButton' onClick={goToLobby}>Play Match</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n                {/* Avatar Chosing Modal */}\n                <Modal className='avatarModal' show={showAvatar} onHide={handleCloseAvatar}>\n\n                    <Modal.Body className='modalBody'>\n                        <Container className='modalContainer'>\n                            <div className='row'>\n                                {selectAvatar === '' ? (\n                                    avatarArr.map((avatars, i) => (\n                                        <div className='col-lg-3' key={i}>\n                                            <ModalColumn\n                                                imageString={avatars}\n                                                imgData={avatars}\n                                                changeFunc={changeFunc}\n                                            />\n                                        </div>\n                                    ))\n                                ) : (\n                                        avatarArr.map((avatars, i) => {\n                                            if (avatars !== selectAvatar) {\n                                                return (\n                                                    <div className='col-lg-3 faded' key={i}>\n                                                        <ModalColumn\n                                                            imageString={avatars}\n                                                            imgData={avatars}\n                                                            changeFunc={changeFunc}\n                                                        />\n                                                    </div>\n                                                )\n                                            }\n\n                                            else {\n                                                return (\n                                                    <div className='col-lg-3' key={i}>\n                                                        <ModalColumn\n                                                            imageString={avatars}\n                                                            imgData={avatars}\n                                                            changeFunc={changeFunc}\n                                                        />\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                    )}\n                            </div>\n                        </Container>\n                    </Modal.Body>\n\n                    <Modal.Footer className='modalFooter'>\n                        <Button variant='danger' className='closeButtonModal' onClick={handleCloseAvatar}> Close </Button>\n                        <Button variant='primary' className='saveButtonModal' onClick={saveFuncAvatar}> Save Changes </Button>\n                    </Modal.Footer>\n                </Modal>\n                {/* Deck Chosing Modal  */}\n                <Modal className='avatarModal' show={showDeck} onHide={handleCloseDeck}>\n\n                    <Modal.Body className='modalBody'>\n                        <Container className='modalContainer'>\n                            <button  className='wood springButton' onClick={selectSpring}><span role='img' aria-label='Spring emoji'>🌱</span> Spring <span role='img' aria-label='Spring emoji'>🌱</span></button>\n                            <button  className='wood summerButton' onClick={selectSummer}><span role='img' aria-label='Sun emoji'>☀️</span> Summer <span role='img' aria-label='☀️'></span></button>\n                            <button  className='wood fallButton' onClick={selectFall}><span role='img' aria-label='Leaf emoji'>🍂</span> Fall <span role='img' aria-label='Leaf emoji'>🍂</span></button>\n                            <button  className='wood winterButton' onClick={selectWinter}><span role='img' aria-label='Snowflake emoji'>❄️</span> Winter <span role='img' aria-label='Snowflake emoji'>❄️</span></button>\n                        </Container>\n                    </Modal.Body>\n\n                    <Modal.Footer className='modalFooter'>\n                        <Button variant='danger' className='closeButtonModal' onClick={handleCloseDeck}> Close </Button>\n                        {/* <Button variant='primary' className='saveButtonModal'> Save Changes </Button> */}\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        </div>\n    )\n\n}\n\nexport default UserProfile;","import React from 'react';\n\nimport Card from '../Card';\n\nfunction CardPlaceHolder(props) {\n  return (\n    <div id={props.id}>\n      <Card bodyId='playAreaRow'>\n        <div id='cardRow'>\n          {[...Array(props.cardCount)].map((card, i) => (\n            <Card id='opponentCard' key={i}>\n              <img\n                src='/images/cardBack/lava_style/back/back_lava.png'\n                alt='Back of card'\n                className='opponentCard'\n              />\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default CardPlaceHolder;\n","export default {\r\n  CARD: 'card'\r\n};","import React from 'react';\nimport { useDrag, DragPreviewImage } from 'react-dnd';\n\nimport Card from '../Card/index';\nimport ItemTypes from '../../utils/ItemTypes';\n\nimport './GameCard.css';\n\nfunction GameCard(props) {\n  const [, drag, preview] = useDrag({\n    item: { type: ItemTypes.CARD, uId: props.uId }\n  });\n\n  return (\n    <>\n      <DragPreviewImage\n        connect={preview}\n        src={'/images/cardImg/' + props.img}\n      />\n      <div ref={drag}>\n        <Card id='gameCard'>\n          <div className='image-container'>\n            <img\n              src='./images/cardBack/lava_style/card_title/mana_point_lava.png'\n              alt='placeholder'\n              className='mana'\n            />\n            <p className='resource'>{props.resourceCost}</p>\n            <img\n              src={'/images/cardImg/' + props.img}\n              alt='placeholder'\n              className='card-image'\n            />\n          </div>\n          <img\n            src='./images/cardBack/lava_style/card_title/frame_title_lava.png'\n            alt='placeholder'\n            className='card-frame'\n          />\n\n          <div className='name-container'>\n            <h5 className='card-name'>{props.name.trim()}</h5>\n          </div>\n\n          <div className='effect-box'>\n            {props.effect.length > 40 ? (\n              <p\n                className='effect'\n                style={{\n                  marginBottom: '0',\n                  position: 'relative',\n                  top: '4px',\n                  fontSize: '11.5px'\n                }}\n              >\n                {props.effect}\n              </p>\n            ) : (\n              <p className='effect'>{props.effect}</p>\n            )}\n          </div>\n\n          {props.isCreature ? (\n            <div className='stats-box row'>\n              <p className='attack'>{props.attack}</p>\n              <p className='health'>{props.health}</p>\n            </div>\n          ) : (\n            <></>\n          )}\n        </Card>\n      </div>\n    </>\n  );\n}\n\nexport default GameCard;\n","import React from 'react';\n\nimport Card from '../Card/index';\n\n// Info card is just like Game Card, except it is not draggable\n\nfunction InfoCard(props) {\n  return (\n    <div>\n      <Card id='gameCard'>\n        <div className='image-container'>\n          <img\n            src='./images/cardBack/lava_style/card_title/mana_point_lava.png'\n            alt='placeholder'\n            className='mana'\n          />\n          <p className='resource'>{props.resourceCost}</p>\n          <img\n            src={'/images/cardImg/' + props.img}\n            alt='placeholder'\n            className='card-image'\n          />\n        </div>\n        <img\n          src='./images/cardBack/lava_style/card_title/frame_title_lava.png'\n          alt='placeholder'\n          className='card-frame'\n        />\n        <div className='name-container'>\n          <h5 className='card-name'>{props.name.trim()}</h5>\n        </div>\n        <div className='effect-box'>\n          <p className='effect'>{props.effect}</p>\n        </div>\n        <div className='stats-box row'>\n          <p className='attack'>{props.attack}</p>\n          <p className='health'>{props.health}</p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default InfoCard;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport Card from '../Card';\nimport { CardContext } from '../GameBoard';\nimport { useDrop } from 'react-dnd';\nimport ItemTypes from '../../utils/ItemTypes';\nimport GameCard from '../GameCard';\nimport InfoCard from '../InfoCard';\n\nimport './style.css';\n\nfunction CardHolder(props) {\n  const { cardDraggedToPosition, playerDeck } = useContext(CardContext);\n\n  const [heldCards, setHeldCards] = useState(\n    playerDeck.filter(card => card.position === props.id)\n  );\n\n  useEffect(() => {\n    if (!props.override) {\n      setHeldCards(playerDeck.filter(card => card.position === props.id));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerDeck]);\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: item => cardDraggedToPosition(item.uId, props.id)\n  });\n\n  return (\n    <div id={props.id} ref={drop} >\n      <Card bodyId='playAreaRow' className='cardHolder'>\n        <div id='cardRow'>\n          {props.override ? (\n            props.card ? (\n              <InfoCard {...props.card} />\n            ) : (\n              <div key='noCard'></div>\n            )\n          ) : (\n            heldCards.map(card => <GameCard {...card} />)\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default CardHolder;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useDrop } from 'react-dnd';\nimport ItemTypes from '../../utils/ItemTypes';\nimport { CardContext } from '../GameBoard';\n\n\nimport Card from '../Card';\nimport './UserGameInformation.css';\n\nconst playerInfo = {\n  username: localStorage.getItem('username'),\n  avatar: localStorage.getItem('avatar'),\n}\n\n\nfunction UserGameInformation(props) {\n  \n  const { cardDraggedToPosition, } = useContext(CardContext);\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: item => cardDraggedToPosition(item.uId, props.id)\n  });\n\n  return (\n    <div id={props.id} ref={drop}>\n      <Card id='gameInfo'>\n        <div id='cardRow'>\n            <div className='col gameInfoCol'>\n            <img\n            src={'./images/cardImg/' + playerInfo.avatar}\n            className='gameInfoAvatar'\n            />\n            {/* placeholder */}\n            <p className='lifeTotal'>{props.lifeState}</p>\n            </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default UserGameInformation;","export default {\n  enemyAtkRows: ['opponentAtt1', 'opponentAtt2', 'opponentAtt3'],\n  enemyDefRows: ['opponentDef1', 'opponentDef2'],\n  userAtkRows: ['userAtt1', 'userAtt2', 'userAtt3'],\n  userDefRows: ['userDef1', 'userDef2'],\n  // prettier-ignore\n  springDeck: [1, 1, 5, 9, 9, 13, 17, 17, 21, 21, 25, 25, 29, 29, 33, 33, 37, 37, 41, 41, 45, 45, 49, 49, 53, 53, 57, 61, 65, 69],\n  // prettier-ignore\n  summerDeck: [2, 2, 6, 6, 10, 14, 18, 18, 22, 22, 26, 26, 30, 30, 34, 34, 38, 38, 42, 42, 46, 46, 50, 50, 54, 54, 58, 62, 66, 70],\n  // prettier-ignore\n  fallDeck: [3, 3, 7, 11, 11, 15, 19, 19, 23, 23, 27, 27, 31, 31, 35, 35, 39, 39, 43, 43, 47, 47, 51, 51, 55, 55, 59, 63, 67, 71],\n  // prettier-ignore\n  //winterDeck: [4, 4, 8, 8, 12, 16, 20, 20, 24, 24, 28, 28, 32, 32, 36, 36, 40, 40, 44, 44, 48, 48, 52, 52, 56, 56, 60, 64, 68, 72],\n  winterDeck: [52, 4, 4, 8, 8, 8, 8, 12, 12, 12],\n\n  duplicate: function (array, tempDeck) {\n    const newDeck = [];\n    for (let i = 0; i < tempDeck.length; i++) {\n      for (let j = 0; j < array.length; j++) {\n        if (array[j].cardId === tempDeck[i]) {\n          newDeck.push({ ...array[j], uId: i, key: 'gameCard' + i }); // Give this card a unique Id\n          break;\n        }\n      }\n    }\n    return newDeck;\n  },\n\n  copyDeck: function (array) {\n    const copy = array.map(el => {\n      return { ...el };\n    });\n\n    return copy;\n  },\n\n  deckChoice: function (array) {\n    let deckC;\n    switch (array[0].cardId) {\n      case 1:\n        deckC = this.springDeck;\n        break;\n      case 2:\n        deckC = this.summerDeck;\n        break;\n      case 3:\n        deckC = this.fallDeck;\n        break;\n      case 4:\n        deckC = this.winterDeck;\n        break;\n      default:\n        console.log('You do not have a deck');\n    }\n    return this.duplicate(array, deckC);\n  },\n\n  shuffleArray: function (array) {\n    var max = array.length / 4;\n    var min = 0;\n    for (let i = 0; i < 4; i++) {\n      //Randomly generate a random index number\n      for (let j = 0; j < 20; j++) {\n        const randomIndex1 = Math.floor(Math.random() * (max - min) + min);\n        const randomIndex2 = Math.floor(Math.random() * (max - min) + min);\n        // Swap these elements in the array\n        if (randomIndex1 !== randomIndex2) {\n          const tempElement = array[randomIndex1];\n          array[randomIndex1] = array[randomIndex2];\n          array[randomIndex2] = tempElement;\n        }\n      }\n      max += array.length / 4;\n      min += array.length / 4;\n    }\n    return array;\n  },\n\n  // Assigns the first 5 cards in the deck to be in the player's hand\n  assignHand: function (deck) {\n    for (let i = 0; i < 5; i++) {\n      deck[i].position = 'userPlayArea';\n    }\n\n    return deck;\n  },\n\n  inOpponentRows: function (position) {\n    return this.enemyAtkRows.includes(position) || this.enemyDefRows.includes(position);\n  },\n\n  isPositionFilled: function (position, deck) {\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].position === position) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  isOpponentPositionFilled: function (position, opponentData) {\n    position = position.replace('opponent', 'user');\n\n    return opponentData[position];\n  },\n\n  damageCard: function (position, damage, deck) {\n    let cardDied = null;\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].position === position) {\n        deck[i].health -= damage;\n\n        if (deck[i].health <= 0) {\n          deck[i].position = 'userGrave';\n          deck[i].health = 0;\n          cardDied = { ...deck[i] };\n        }\n\n        break;\n      }\n    }\n\n    return [deck, cardDied];\n  },\n\n  hasAvailableCards: function (deck) {\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].position === '') {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  findFirstAvailableCards: function (cardCount, deck) {\n    if (cardCount === 0) {\n      return [];\n    }\n\n    const availableCardIndices = [];\n    let foundCards = 0;\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].position === '') {\n        availableCardIndices.push(i);\n        foundCards++;\n\n        if (foundCards === cardCount) {\n          break;\n        }\n      }\n    }\n\n    return availableCardIndices;\n  },\n\n  isInDefenseRow: function (position) {\n    return this.userDefRows.includes(position);\n  },\n\n  getCardInPosition: function (position, deck) {\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].position === position) {\n        return deck[i];\n      }\n    }\n\n    return null;\n  },\n\n  countAllCardsInPosition: function (position, deck) {\n    let occurs = 0;\n\n    for (let i = 0; i < deck.length; i++) {\n      if ('position' in deck[i] && deck[i].position === position) occurs++;\n    }\n    return occurs;\n  },\n\n  getPlayedCards: function (deck) {\n    const playedCards = [];\n    for (let i = 0; i < deck.length; i++) {\n      if (\n        this.userAtkRows.includes(deck[i].position) ||\n        this.userDefRows.includes(deck[i].position)\n      ) {\n        playedCards.push(deck[i]);\n      }\n    }\n\n    return playedCards;\n  },\n\n  compareCards: function (position, ourData, ourDeck) {\n    let theirCard = ourData[position];\n    let ourCard = this.getCardInPosition(position, ourDeck);\n\n    // Our card died\n    if (!theirCard && ourCard) {\n      ourCard.health = 0;\n      ourCard.position = 'userGrave';\n      ourDeck = [...ourDeck.filter(card => card.uId !== ourCard.uId), ourCard];\n      return [ourCard, ourDeck];\n    } else if (!theirCard && !ourCard) {\n      return [null, ourDeck];\n    } else {\n      ourCard.health = theirCard.health;\n      ourCard.attack = theirCard.attack;\n      ourDeck = [...ourDeck.filter(card => card.uId !== ourCard.uId), ourCard];\n      return [null, ourDeck];\n    }\n  },\n\n  clamp: function (num, a, b) {\n    return Math.max(Math.min(num, Math.max(a, b)), Math.min(a, b));\n  },\n\n  getCardWithId: function (cardId, deck) {\n    for (let i = 0; i < deck.length; i++) {\n      if (deck[i].uId === cardId) {\n        return deck[i];\n      }\n    }\n\n    return null;\n  }\n};\n","export default {\r\n  triggers: ['ONPLAY', 'ONDEATH', 'ONATK'],\r\n  operators: [\r\n    'DRAW',\r\n    'RES',\r\n    'DMG',\r\n    'HEAL',\r\n    'KILL',\r\n    'TOPDECK',\r\n    'RAISEATK',\r\n    'RAISEDEF',\r\n    'SETATK',\r\n    'ADDEFFECT'\r\n  ],\r\n  targettingOperators: ['HEAL', 'KILL', 'RAISEATK', 'RAISEDEF', 'SETATK'],\r\n  positions: [\r\n    'userAtt1',\r\n    'userAtt2',\r\n    'userAtt3',\r\n    'userDef1',\r\n    'userDef2',\r\n    'opponentAtt1',\r\n    'opponentAtt2',\r\n    'opponentAtt3',\r\n    'opponentDef1',\r\n    'opponentDef2'\r\n  ],\r\n\r\n  // Puts all TRIGGERS into individual objects describing their behavior\r\n  // Example token:\r\n  /* \r\n     {\r\n       trigger: 'ONPLAY',\r\n       operations: [\r\n         {\r\n           op: 'RES',\r\n           param1: 'SELF',\r\n           param2: '3'\r\n         }\r\n       ]\r\n     }\r\n   */\r\n  tokenize: function (string) {\r\n    if (!string || string.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const splitString = string.trim().split(' ');\r\n\r\n    // Group all TRIGGERS and their OPERATORS into objects\r\n    const tokens = [];\r\n    let currentToken = -1;\r\n    let currentOperator = -1;\r\n    let currentParameter = 0;\r\n    for (let i = 0; i < splitString.length; i++) {\r\n      let word = splitString[i];\r\n\r\n      // Check to see if this is a new token\r\n      if (this.triggers.includes(word)) {\r\n        tokens.push({\r\n          trigger: word,\r\n          operations: []\r\n        });\r\n        currentToken++;\r\n        currentOperator = -1;\r\n        currentParameter = 0;\r\n      } else if (this.operators.includes(word)) {\r\n        // Check to see if this is an operator\r\n        tokens[currentToken].operations.push({\r\n          op: word\r\n        });\r\n        currentOperator++;\r\n        currentParameter = 0;\r\n      } else {\r\n        // This is a parameter\r\n        currentParameter++;\r\n        tokens[currentToken].operations[currentOperator]['param' + currentParameter] = word;\r\n      }\r\n    }\r\n\r\n    return tokens;\r\n  },\r\n\r\n  getScriptTargets: function (operation) {\r\n    // TODO: We need to be able to target the enemy player/hero\r\n\r\n    // The targetting parameter should be the first param, make sure it exists\r\n    if (!operation || !operation.param1) {\r\n      return [];\r\n    }\r\n\r\n    const target = operation.param1;\r\n\r\n    if (target === 'SELF') {\r\n      return this.positions.slice(0, 5);\r\n    } else if (target === 'OPP') {\r\n      return this.positions.slice(5);\r\n    } else if (target === 'ALL' || target === 'SINGLE' || operation.op === 'DMG') {\r\n      return this.positions.slice(0);\r\n    } else if (target === 'DEFROW') {\r\n      return this.positions.slice(3, 5);\r\n    } else if (target === 'ATKROW') {\r\n      return this.positions.slice(0, 3);\r\n    } else if (target === 'OPPATKROW') {\r\n      return this.positions.slice(5, 8);\r\n    } else if (target === 'OPPDEFROW') {\r\n      return this.positions.slice(8);\r\n    }\r\n\r\n    return [];\r\n  },\r\n\r\n  canInstaCast: function (operation) {\r\n    const operator = operation.op;\r\n    return (\r\n      operator === 'DRAW' ||\r\n      operator === 'RES' ||\r\n      operator === 'TOPDECK' ||\r\n      operator === 'RAISEATK' ||\r\n      operator === 'RAISEDEF' ||\r\n      operator === 'SETATK' ||\r\n      (operator === 'HEAL' && operation.param1 === 'ALL') ||\r\n      (operator === 'HEAL' && operation.param1 === 'DEFROW') ||\r\n      (operator === 'HEAL' && operation.param1 === 'ATKROW')\r\n    );\r\n  }\r\n};\r\n","import React, { useState, useEffect, useContext, createContext } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport CardPlaceHolder from '../CardPlaceHolder';\nimport CardHolder from '../CardHolder';\nimport UserGameInformation from '../UserGameInformation';\nimport { GameContext } from '../../pages/Lobby';\n\nimport GameLogic from './gameLogic';\nimport Parser from './cardScript';\n\nimport './gameboard.css';\nimport gameLogic from './gameLogic';\nimport { STATES } from 'mongoose';\n\n// Give this function to the children of this component so they can tell us when\n// A card was dropped on them\nexport const CardContext = createContext({\n  cardDraggedToPosition: null,\n  playerDeck: null\n});\n\n// TODO: We definitely need to redo the CSS for all of the cardholders and the cards themselves\n//       So things don't look awful\n// TODO: When we drag a card and hover it over a card slot, it should make the slot go grey or\n//       something similar so the user has some kind of feedback\n\n// TODO: Make effects work\n// TODO: Be able to attack the opponent when his defense row is down\n// TODO: Show the opponents health\n// TODO: Implement defense\n\n// TODO: Spell cards should only trigger their effect\n\n// TODO: Players should be able to use every card on the field in the atk row once\n\n// TODO: Make cards cost resources\n\n// TODO: Investigate error with dragging cards outside chrome\n// TODO: Replace opponents grave with player to attack\n\n// TODO: FIX TOPDECK\n\nfunction GameBoard() {\n  const { socket, gameId, deck, playerNumber } = useContext(GameContext);\n\n  const [playerDeck, setPlayerDeck] = useState(\n    deck.map(card => {\n      card.position = '';\n      card.baseAttack = card.attack;\n      card.baseHealth = card.health;\n      card.onPlayEffect = null;\n      card.onDeathEffect = null;\n      card.onAttackEffect = null;\n\n      // Parse the effect on this card if applicable\n      const tokens = Parser.tokenize(card.effectScript);\n\n      for (let i = 0; i < tokens.length; i++) {\n        switch (tokens[i].trigger) {\n          case 'ONPLAY':\n            card.onPlayEffect = tokens[i];\n            break;\n          case 'ONDEATH':\n            card.onDeathEffect = tokens[i];\n            break;\n          case 'ONATK':\n            card.onAttackEffect = tokens[i];\n            break;\n        }\n      }\n      return card;\n    })\n  );\n\n  const [playerData, setPlayerData] = useState({\n    isPlayersTurn: true,\n    hasInitiated: false,\n    currentResource: 2,\n    lifeTotal: 25\n  });\n\n  const [updateSwitch, setUpdateSwitch] = useState(false); // This swings between true and false every time we need to update\n\n  const [effectData, setEffectData] = useState(null);\n\n  const [opponentBoardData, setOpponentBoardData] = useState({\n    opponentPlayAreaCount: 5,\n    opponentHasDeck: true,\n    userDef1: null,\n    userDef2: null,\n    userAtt1: null,\n    userAtt2: null,\n    userAtt3: null,\n    currentResource: 2,\n    opponentLifeTotal: 25\n  });\n\n  useEffect(() => {\n    socket.emit('room', gameId, 'updateBoard', {\n      otherDeck: playerDeck,\n      otherData: playerData,\n      ourData: opponentBoardData,\n      player: playerNumber\n    });\n  }, [updateSwitch]);\n\n  useEffect(() => {\n    socket.off('updateBoard');\n    socket.on('updateBoard', ({ otherDeck, otherData, ourData, player }) => {\n      if (player === playerNumber) {\n        return;\n      }\n\n      // Update our opponent board data\n      const boardData = { ...opponentBoardData };\n      boardData.userDef1 = boardData.userDef2 = boardData.userAtt1 = boardData.userAtt2 = boardData.userAtt3 = null;\n      boardData.currentResource = otherData.currentResource;\n\n      const opponentCards = GameLogic.getPlayedCards(otherDeck);\n      for (let i = 0; i < opponentCards.length; i++) {\n        boardData[opponentCards[i].position] = opponentCards[i];\n      }\n\n      let playAreaCount = 0;\n      for (let i = 0; i < otherDeck.length; i++) {\n        if (otherDeck[i].position === 'userPlayArea') {\n          playAreaCount++;\n        }\n        if (otherDeck[i].position === '') {\n          boardData.opponentHasDeck = true;\n        }\n      }\n      boardData.opponentPlayAreaCount = playAreaCount;\n\n      setOpponentBoardData(boardData);\n\n      if (playerData.hasInitiated) {\n        // Update our board data\n        const newPlayerData = { ...playerData };\n        newPlayerData.currentResource = ourData.currentResource;\n\n        let ourDeck = GameLogic.copyDeck(playerDeck);\n        let deadCards = [null, null, null, null, null];\n        [deadCards[0], ourDeck] = GameLogic.compareCards('userDef1', ourData, ourDeck);\n        [deadCards[1], ourDeck] = GameLogic.compareCards('userDef2', ourData, ourDeck);\n        [deadCards[2], ourDeck] = GameLogic.compareCards('userAtt1', ourData, ourDeck);\n        [deadCards[3], ourDeck] = GameLogic.compareCards('userAtt2', ourData, ourDeck);\n        [deadCards[4], ourDeck] = GameLogic.compareCards('userAtt3', ourData, ourDeck);\n\n        let deadCard = null;\n        for (let i = 0; i < deadCards.length; i++) {\n          if (deadCards[i]) {\n            deadCard = deadCards[i];\n            break;\n          }\n        }\n\n        if (deadCard) {\n          // Trigger that card's on death effect\n          const effect = deadCard.onDeathEffect;\n          if (effect) {\n            for (let i = 0; i < effect.operations.length; i++) {\n              instantCastOperation(deadCard.uId, effect.operations[i], ourDeck);\n            }\n          }\n          setPlayerData(newPlayerData);\n          setPlayerDeck(ourDeck);\n          setUpdateSwitch(!updateSwitch);\n        } else {\n          setPlayerData(newPlayerData);\n          setPlayerDeck(ourDeck);\n        }\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerDeck, playerData, opponentBoardData]);\n\n  useEffect(() => {\n    socket.off('ourTurn');\n    socket.on('ourTurn', ({ fromPlayer }) => {\n      if (fromPlayer !== playerNumber) {\n        setPlayerData(prevState => ({ ...prevState, isPlayersTurn: true }));\n      } else {\n        const tempData = { ...playerData };\n        tempData.isPlayersTurn = false;\n        if (tempData.currentResource <= 8) {\n          tempData.currentResource += 1;\n        }\n        setPlayerData(tempData);\n        // Check to see the amount of cards in the players hands and draws a card if able\n        const handCount = GameLogic.countAllCardsInPosition('userPlayArea', playerDeck);\n        if (handCount < 5) {\n          drawCards(1);\n        }\n\n        setEffectData(null); // They may have wasted any spells they could've cast\n\n        setUpdateSwitch(!updateSwitch);\n      }\n    });\n  }, [updateSwitch, playerData, playerDeck]);\n\n  useEffect(() => {\n    const copy = GameLogic.copyDeck(playerDeck);\n    setPlayerDeck(GameLogic.assignHand(GameLogic.shuffleArray(GameLogic.deckChoice(copy))));\n    setPlayerData(prevState => ({\n      ...prevState,\n      isPlayersTurn: playerNumber === 1 ? true : false,\n      hasInitiated: true\n    }));\n    setUpdateSwitch(!updateSwitch);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Called by CardHolder components whenever a card is dragged on to one of them\n  const cardDraggedToPosition = (cardId, destinationPosition) => {\n    const cardIndex = playerDeck.findIndex(card => card.uId === cardId);\n    const cardVal = { ...playerDeck[cardIndex] }; // The card we're dragging\n\n    if (!playerData.isPlayersTurn || !cardVal.isCreature) {\n      return;\n    }\n\n    if (effectData) {\n      castEffect(destinationPosition, cardVal);\n    } else {\n      moveCard(destinationPosition, cardVal);\n    }\n  };\n\n  const castEffect = (destinationPosition, cardVal) => {\n    if (cardVal.uId !== effectData.cardId || destinationPosition === 'userPlayArea') {\n      return;\n    }\n\n    // Check to make sure our destination is a possible target for this effect\n    const operation = effectData.effect.operations[effectData.currentOperation];\n    const availablePositions = Parser.getScriptTargets(operation);\n    if (availablePositions.includes(destinationPosition)) {\n      switch (operation.op) {\n        case 'HEAL':\n          // This must be the 'single' target\n          if (operation.param1 !== 'SINGLE') {\n            break;\n          }\n\n          // We need different behavior for if we're healing an enemy\n          if (GameLogic.inOpponentRows(destinationPosition)) {\n            destinationPosition = destinationPosition.replace('opponent', 'user');\n            const boardData = { ...opponentBoardData };\n            const destinationCard = boardData[destinationPosition];\n            if (!destinationCard) {\n              break;\n            }\n            destinationCard.health += parseInt(operation.param2);\n            setOpponentBoardData(boardData);\n          } else {\n            // We're healing one of our own\n            const ourDeck = GameLogic.copyDeck(playerDeck);\n            const destinationCard = GameLogic.getCardInPosition(destinationPosition, ourDeck);\n            if (!destinationCard) {\n              break;\n            }\n            destinationCard.health += parseInt(operation.param2);\n            setPlayerDeck(ourDeck);\n          }\n          increaseEffectOperation();\n          setUpdateSwitch(!updateSwitch);\n          break;\n\n        case 'DMG':\n          // We need different behavior for if we're hurting an enemy\n          if (GameLogic.inOpponentRows(destinationPosition)) {\n            destinationPosition = destinationPosition.replace('opponent', 'user');\n            const boardData = { ...opponentBoardData };\n            const destinationCard = boardData[destinationPosition];\n            if (!destinationCard) {\n              break;\n            }\n            destinationCard.health -= parseInt(operation.param1);\n            if (destinationCard.health <= 0) {\n              boardData[destinationPosition] = null;\n            }\n            setOpponentBoardData(boardData);\n          } else {\n            // We're hurting one of our own\n            const ourDeck = GameLogic.copyDeck(playerDeck);\n            const destinationCard = GameLogic.getCardInPosition(destinationPosition, ourDeck);\n            if (!destinationCard) {\n              break;\n            }\n            destinationCard.health -= parseInt(operation.param1);\n            if (destinationCard.health <= 0) {\n              handleCardDeath(destinationCard, ourDeck);\n            }\n            setPlayerDeck(ourDeck);\n          }\n          increaseEffectOperation();\n          setUpdateSwitch(!updateSwitch);\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  const increaseEffectOperation = (effectParam, deck) => {\n    if (!effectParam) {\n      effectParam = { ...effectData };\n    }\n\n    for (let i = effectParam.currentOperation + 1; i < effectParam.effect.operations.length; i++) {\n      if (Parser.canInstaCast(effectParam.effect.operations[i])) {\n        if (deck) {\n          instantCastOperation(effectParam.cardId, effectParam.effect.operations[i], deck);\n        } else {\n          instantCastOperation(effectParam.cardId, effectParam.effect.operations[i]);\n        }\n      } else {\n        setEffectData({\n          cardId: effectParam.cardId,\n          effect: effectParam.effect,\n          currentOperation: i\n        });\n        return;\n      }\n    }\n\n    setEffectData(null);\n  };\n\n  const moveCard = (destinationPosition, cardVal) => {\n    if (destinationPosition !== 'userPlayArea') {\n      // Make sure the given position doesn't have a card in it already\n      if (\n        GameLogic.isInDefenseRow(cardVal.position) ||\n        GameLogic.isPositionFilled(destinationPosition, playerDeck)\n      ) {\n        return;\n      }\n\n      if (GameLogic.inOpponentRows(destinationPosition)) {\n        if (\n          GameLogic.isOpponentPositionFilled(destinationPosition, opponentBoardData) &&\n          cardVal.position !== 'userPlayArea' &&\n          cardVal.attack > 0\n        ) {\n          return attackCard(cardVal.position, destinationPosition);\n        } else {\n          return;\n        }\n      }\n\n      if (cardVal.position === 'userPlayArea') {\n        const deck = GameLogic.copyDeck(playerDeck);\n        const cardCopy = GameLogic.getCardWithId(cardVal.uId, deck);\n        // Make sure we're moving from the play area to the field\n        cardCopy.position = destinationPosition;\n\n        // Set that we're now starting an effect if this card has one\n        const effect = cardCopy.onPlayEffect;\n        if (effect) {\n          increaseEffectOperation(\n            { cardId: cardVal.uId, effect: effect, currentOperation: -1 },\n            deck\n          );\n        }\n\n        setPlayerDeck(deck);\n        setUpdateSwitch(!updateSwitch);\n      }\n    }\n  };\n\n  const instantCastOperation = (cardId, operation, useDeck) => {\n    const { op, param1, param2 } = operation;\n    switch (op) {\n      case 'RES': {\n        if (param1 === 'SELF') {\n          let currentResources = playerData.currentResource;\n          currentResources = GameLogic.clamp(currentResources + parseInt(param2), 0, 9);\n          setPlayerData(prevState => ({ ...prevState, currentResource: currentResources }));\n        } else if (param1 === 'OPP') {\n          let currentResources = opponentBoardData.currentResource;\n          currentResources = GameLogic.clamp(currentResources + parseInt(param2), 0, 9);\n          setOpponentBoardData(prevState => ({ ...prevState, currentResource: currentResources }));\n        }\n        break;\n      }\n\n      case 'DRAW': {\n        const handCount = GameLogic.countAllCardsInPosition('userPlayArea', useDeck || playerDeck);\n        const canDraw = GameLogic.clamp(parseInt(param1), 0, 5 - handCount);\n        const indices = GameLogic.findFirstAvailableCards(canDraw, playerDeck);\n        let deck = useDeck || GameLogic.copyDeck(playerDeck);\n        if (useDeck) {\n          for (let i = 0; i < indices.length; i++) {\n            deck[indices[i]].position = 'userPlayArea';\n          }\n        } else {\n          for (let i = 0; i < indices.length; i++) {\n            const cardVal = deck[indices[i]];\n            cardVal.position = 'userPlayArea';\n            setPlayerDeck(deck);\n          }\n        }\n        break;\n      }\n\n      case 'HEAL': {\n        let deck;\n        let positions;\n        if (useDeck) {\n          deck = useDeck;\n        } else {\n          deck = GameLogic.copyDeck(playerDeck);\n        }\n        if (param1 === 'ALL') {\n          positions = [...GameLogic.userAtkRows, ...GameLogic.userDefRows];\n        } else if (param1 === 'DEFROW') {\n          positions = GameLogic.userDefRows;\n        } else if (param1 === 'ATKROW') {\n          positions = GameLogic.userAtkRows;\n        } else if (param1 === 'DEALT') {\n          // Get card with uId from deck\n          const card = GameLogic.getCardWithId(cardId, deck);\n          card.health += card.attack;\n          break;\n        }\n        // Increase the health of all of our cards\n        for (let i = 0; i < positions; i++) {\n          const card = deck[positions[i]];\n          if (card) {\n            card.health += parseInt(param2);\n          }\n        }\n\n        setPlayerDeck(deck);\n        break;\n      }\n\n      case 'RAISEATK': {\n        let deck = useDeck || GameLogic.copyDeck(playerDeck);\n        let positions;\n        if (param1 === 'ALL') {\n          positions = [...GameLogic.userAtkRows, ...GameLogic.userDefRows];\n        } else if (param1 === 'ATKROW') {\n          positions = GameLogic.userAtkRows;\n        } else if (param1 === 'DEFROW') {\n          positions = GameLogic.userDefRows;\n        }\n\n        // Increase the attack of all of our cards\n        for (let i = 0; i < positions.length; i++) {\n          const card = GameLogic.getCardInPosition(positions[i], deck);\n          if (card) {\n            card.attack += parseInt(param2);\n          }\n        }\n\n        if (!useDeck) {\n          setPlayerDeck(deck);\n        }\n        break;\n      }\n\n      case 'TOPDECK': {\n        let deck = useDeck || GameLogic.copyDeck(playerDeck);\n        const card = GameLogic.getCardWithId(cardId, deck);\n        card.position = '';\n\n        for (let i = 0; i < deck.length; i++) {\n          if (deck[i].uId === card.uId) {\n            deck[i] = deck[0];\n            break;\n          }\n        }\n        deck[0] = card;\n\n        if (!useDeck) {\n          setPlayerDeck(deck);\n        }\n      }\n    }\n  };\n\n  const attackCard = (attackingCardPosition, attackedPosition) => {\n    const ourDeck = GameLogic.copyDeck(playerDeck);\n    let attackingCard;\n    for (let i = 0; i < ourDeck.length; i++) {\n      if (ourDeck[i].position === attackingCardPosition) {\n        attackingCard = ourDeck[i];\n      }\n    }\n\n    // Need to replace opponent with user here to match the opponentBoardData object\n    attackedPosition = attackedPosition.replace('opponent', 'user');\n    const boardData = { ...opponentBoardData };\n    boardData[attackedPosition].health -= attackingCard.attack;\n\n    // Start the on attack effect\n    const attackEffect = attackingCard.onAttackEffect;\n    if (attackEffect) {\n      for (let i = 0; i < attackEffect.operations.length; i++) {\n        instantCastOperation(attackingCard.uId, attackEffect.operations[i], ourDeck);\n      }\n    }\n\n    // Retaliation\n    attackingCard.health -= boardData[attackedPosition].attack;\n    if (attackingCard.health <= 0) {\n      handleCardDeath(attackingCard, ourDeck);\n    }\n    setPlayerDeck(ourDeck);\n\n    if (boardData[attackedPosition].health <= 0) {\n      boardData[attackedPosition] = null;\n    }\n\n    setOpponentBoardData(boardData);\n    setUpdateSwitch(!updateSwitch);\n  };\n\n  const handleCardDeath = (deadCard, ourDeck) => {\n    deadCard.health = 0;\n    deadCard.position = 'userGrave';\n\n    // Trigger that card's on death effect\n    const effect = deadCard.onDeathEffect;\n    if (effect) {\n      for (let i = 0; i < effect.operations.length; i++) {\n        instantCastOperation(deadCard.uId, effect.operations[i], ourDeck);\n      }\n    }\n  };\n\n  const sendTurnChange = () => {\n    socket.emit('room', gameId, 'ourTurn', {\n      fromPlayer: playerNumber\n    });\n  };\n\n  const drawCards = cardCount => {\n    const indices = GameLogic.findFirstAvailableCards(cardCount, playerDeck);\n\n    for (let i = 0; i < indices.length; i++) {\n      const cardVal = { ...playerDeck[indices[i]] };\n      cardVal.position = 'userPlayArea';\n      setPlayerDeck([...playerDeck.filter(card => card.uId !== cardVal.uId), cardVal]);\n    }\n  };\n\n  return (\n    <CardContext.Provider value={{ cardDraggedToPosition, playerDeck }}>\n      <DndProvider backend={HTML5Backend}>\n        <div className='wrapper animate__animated animate__bounceIn'>\n          <div className='userResourceRow'>\n            {[...Array(opponentBoardData.currentResource)].map((resource, i) => (\n              <span className='resourceCircle activeResource' key={'resourceOpponent' + i}></span>\n            ))}\n          </div>\n\n          <div id='opponentRow'>\n            <CardPlaceHolder\n              id='opponentDeck'\n              cardCount={opponentBoardData.opponentHasDeck ? 1 : 0}\n            />\n            <CardPlaceHolder\n              id='opponentPlayArea'\n              cardCount={opponentBoardData.opponentPlayAreaCount}\n            />\n          </div>\n\n          <div id='opponentDefRow'>\n            <CardHolder id='opponentDef1' override={true} card={opponentBoardData.userDef1} />\n            <CardHolder id='opponentDef2' override={true} card={opponentBoardData.userDef2} />\n          </div>\n\n          <div id='opponentAttRow'>\n            <CardHolder id='opponentAtt1' override={true} card={opponentBoardData.userAtt1} />\n            <CardHolder id='opponentAtt2' override={true} card={opponentBoardData.userAtt2} />\n            <CardHolder id='opponentAtt3' override={true} card={opponentBoardData.userAtt3} />\n          </div>\n        </div>\n\n        <hr />\n\n        <div className='wrapper animate__animated animate__bounceIn'>\n        {playerData.isPlayersTurn ? (\n          <div className='endTurnRow'>\n            <button className='woodEndButton' onClick={sendTurnChange}>\n              End Turn\n            </button>\n          </div>\n        ) : (\n          <div></div>\n        )}\n          <div id='userAttRow'>\n            <CardHolder id='userAtt1' />\n            <CardHolder id='userAtt2' />\n            <CardHolder id='userAtt3' />\n          </div>\n\n          <div id='userDefRow'>\n            <CardHolder id='userDef1' />\n            <CardHolder id='userDef2' />\n          </div>\n\n          <div id='userRow'>\n            <UserGameInformation id='userInfo' lifeState={playerData.lifeTotal} lifeStateSet={setPlayerData} />\n            <CardPlaceHolder\n              id='userDeck'\n              cardCount={GameLogic.hasAvailableCards(playerDeck) ? 1 : 0}\n            />\n            <CardHolder id='userPlayArea' />\n          </div>\n          <div className='userResourceRow'>\n            {[...Array(playerData.currentResource)].map((resource, i) => (\n              <span className='resourceCircle activeResource' key={'resourcePlayer' + i}></span>\n            ))}\n          </div>\n        </div>\n      </DndProvider>\n    </CardContext.Provider>\n  );\n}\n\nexport default GameBoard;","import React, { Component, createContext } from 'react';\n\nimport Container from '../../components/Container/index';\nimport Navbar from '../../components/Navbar/index';\nimport Gameboard from '../../components/GameBoard/index';\n\nimport socketIO from 'socket.io-client';\nimport axios from 'axios';\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport './lobby.css';\n\nconst ENDPOINT = process.env.PORT || 'http://localhost:3001/';\n\nexport const GameContext = createContext({\n  socket: null,\n  gameId: null,\n  deck: null,\n  playerNumber: null\n});\n\n// Socket io works via a back and forth of communication.\n// 1. The user joins a lobby by telling the server to put it in the given room\n// 2. The server then returns the playerNumber back to the client, and the client records this, as well as that it has successfully disconnected\n// 3. The client sends a message to the server telling all clients in the room it has successfully connected, and that player info needs to be updated\n// 4. All clients send back their player info to the room via the server, so all clients can update their local player information correctly\n\nclass Lobby extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username1: localStorage.getItem('username'),\n      username2: 'Waiting for player',\n      avatar1: localStorage.getItem('avatar'),\n      avatar2: 'blue_15.png',\n      joined1: false,\n      joined2: false,\n      deck: [],\n      gameId: 0,\n      joinedLobby: false,\n      showJoin: false,\n      playGame: false,\n      allJoined: false,\n      playerNumber: -1,\n      showModal: false\n    };\n\n    this.socket = null;\n  }\n\n  submitFunc = event => {\n    event.preventDefault();\n  };\n\n  componentDidMount() {\n    this.socket = socketIO(ENDPOINT);\n\n    this.socket.on('requestPlayerInfo', this.sendPlayerInfo);\n    this.socket.on('receivePlayerInfo', this.updatePlayerInfo);\n    this.socket.on('playerLeft', this.cleanUpPlayer);\n  }\n  \n  componentWillUnmount() {\n    // Check if we're connected\n    if (this.state.joinedLobby) {\n      // Tell the server that we're disconnecting\n      this.socket.emit(\n        'room',\n        this.state.gameId,\n        'playerLeft',\n        this.state.playerNumber\n        );\n        \n        this.socket.disconnect();\n      }\n    }\n    \n    handleChangeJoinId = event => {\n      const gameIdNumber = parseInt(event.target.value);\n\n      if (gameIdNumber > 0) {\n        this.setState({ \n          gameId: parseInt(event.target.value || 0),\n          showJoin: true\n        });\n      } else {\n        this.setState({\n          gameId: 0,\n          showJoin: false\n        })\n      }\n    };\n    \n    createNewGame = () => {\n      // Create a unique Socket.IO Room\n      const room = Math.ceil(Math.random() * 100000);\n      this.setState({ gameId: room }, () => this.joinLobby());\n    };\n    \n    joinLobby = () => {\n      // Make sure we're authenticated\n      if (localStorage.getItem('authentication')) {\n        this.socket.emit('joinRoom', this.state.gameId, this.setThisPlayersInfo);\n      }\n    };\n    \n    setThisPlayersInfo = playerNumber => {\n      this.setState({ joinedLobby: true, playerNumber: playerNumber }, () => {\n        if (playerNumber === 2) {\n          this.socket.on('startGame', this.startMatch);\n        }\n        this.socket.emit('room', this.state.gameId, 'requestPlayerInfo')\n      }\n    );\n  };\n\n  sendPlayerInfo = () => {\n    axios\n      .get(\n        '/api/user/' +\n          JSON.parse(localStorage.getItem('authentication'))._id +\n          '/deck'\n      )\n      .then(info => {\n        // Make sure this user has a deck that isn't empty\n        if (info.data && info.data.length === 0) {\n          console.log('Error: you need to select a deck first.');\n          return this.setState({\n            showModal: true\n          });\n        }\n\n        // set our deck\n        this.setState({ deck: info.data });\n\n        const playerInfo = {\n          username: localStorage.getItem('username'),\n          avatar: localStorage.getItem('avatar'),\n          number: this.state.playerNumber\n        };\n        this.socket.emit(\n          'room',\n          this.state.gameId,\n          'receivePlayerInfo',\n          playerInfo\n        );\n      })\n      .catch(() => {\n        console.log('Error: could not find deck info');\n        this.setState({\n          showModal: true\n        });\n      });\n  };\n\n  updatePlayerInfo = playerInfo => {\n    // Get player info\n    if (playerInfo.number === 1) {\n      this.setState(\n        {\n          username1: playerInfo.username,\n          avatar1: playerInfo.avatar,\n          joined1: true\n        },\n        () => {\n          if (this.state.joined1 && this.state.joined2) {\n            document.getElementById('loadingID').classList.remove('loading');\n            this.setState({ allJoined: true });\n          }\n        }\n      );\n    } else if (playerInfo.number === 2) {\n      this.setState(\n        {\n          username2: playerInfo.username,\n          avatar2: playerInfo.avatar,\n          joined2: true\n        },\n        () => {\n          if (this.state.joined1 && this.state.joined2) {\n            document.getElementById('loadingID').classList.remove('loading');\n            this.setState({ allJoined: true });\n          }\n        }\n      );\n    }\n  };\n\n  startMatch = () => {\n    // this.checkUser();\n\n    // If we're hosting we need to let the other player's browser know to start the game too\n    if (this.state.playerNumber === 1) {\n      this.socket.emit('room', this.state.gameId, 'startGame');\n    }\n\n    const startBtnRow = document.getElementById('startRow');\n    const gameIdRow = document.getElementById('gameIdRow');\n    const mainCard = document.getElementById('profileCard');\n    const avatar1 = document.getElementById('avatar1');\n    const avatar2 = document.getElementById('loadingID');\n    \n    startBtnRow.classList.add('animate__animated', 'animate__bounceOut');\n    gameIdRow.classList.add('animate__animated', 'animate__bounceOut');\n\n    startBtnRow.addEventListener('animationend', () => {\n      startBtnRow.style.display = 'none';\n      gameIdRow.style.display = 'none';\n\n      setTimeout(() => {\n        avatar1.classList.add('animate__animated', 'animate__heartBeat');\n\n        avatar1.addEventListener('animationend', () => {\n          avatar2.classList.add('animate__animated', 'animate__heartBeat');\n\n          avatar2.addEventListener('animationend', () => {\n            mainCard.classList.replace('animate__slideInDown', 'animate__bounceOut');\n\n            setTimeout(() => {\n              this.setState({ playGame: true });\n            }, 1000);\n          });\n        });\n      }, 500);\n    });\n  };\n\n  // Duplicate user check\n  checkUser = () => {\n    if (this.state.username1 === this.state.username2) {\n      // this.exitGame();\n    }\n  };\n\n  // Exit game should just redirect the user to the lobby\n  exitGame = () => {\n    window.location = '/lobby';\n  };\n\n  cleanUpPlayer = () => {\n    this.setState({\n      username1: localStorage.getItem('username'),\n      username2: 'Waiting for player',\n      avatar1: localStorage.getItem('avatar'),\n      avatar2: 'blue_15.png',\n      deck: [],\n      playerNumber: 1,\n      joined1: true,\n      joined2: false,\n      allJoined: false\n    });\n\n    if (!this.state.playGame) {\n      document.getElementById('loadingID').classList.add('loading');\n    } else {\n      axios.put(`/api/user/${JSON.parse(localStorage.getItem('authentication'))._id}/win`)\n      .then(() => {\n        window.location.reload();\n      })\n    }\n    this.socket.off('startGame');\n    this.sendPlayerInfo();\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.state.playGame ? (\n          <div>\n            <Navbar />\n            <Container>\n              <div className='card animate__animated animate__slideInDown profileCard' id='profileCard'>\n                <div className='card-body'>\n                  {/* row displaying users */}\n                  <div className='players row'>\n                    <div className='playerOne'>\n                      <h2>{this.state.username1}</h2>\n                      <img\n                        src={'./images/cardImg/' + this.state.avatar1}\n                        alt='Player`s Chosen Avatar'\n                        className='avatar'\n                        id='avatar1'\n                      ></img>\n                    </div>\n\n                    {!this.state.joinedLobby ? (\n                      <div></div>\n                    ) : (\n                      <div className='players'>\n                        <h1 className='vs'>VS</h1>\n                        <div className='playerTwo'>\n                          <h2>{this.state.username2}</h2>\n                          <img\n                            src={'./images/cardImg/' + this.state.avatar2}\n                            alt='Player`s Chosen Avatar'\n                            className='avatar loading'\n                            id='loadingID'\n                          ></img>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <div className='row' id='gameIdRow'>\n                    {!this.state.joinedLobby ? (\n                      <input\n                        className='game-input hide'\n                        type='number'\n                        value={this.state.gameId}\n                        onChange={this.handleChangeJoinId}\n                      ></input>\n                    ) : (\n                      <p className='gameIdText'>{this.state.gameId}</p>\n                    )}\n                  </div>\n                  <div className='row' id='startRow'>\n                    {!this.state.joinedLobby ? (\n                      <div className='button-col'>\n                        {this.state.showJoin ? (\n                          <button className='wood animate__animated animate__bounceIn' onClick={this.joinLobby}>\n                            Join Match\n                          </button>\n                        ) : (\n                          <></>\n                        )}\n                        <button className='wood' onClick={this.createNewGame}>\n                          Create Match\n                        </button>\n                      </div>\n                    ) : (\n                      <div className='button-col'>\n                        {this.state.playerNumber === 1 && this.state.allJoined ? (\n                          <button className='wood animate__animated animate__bounceIn' onClick={this.startMatch}>\n                            Start Match\n                          </button>\n                        ) : (this.state.playerNumber === 2 ? (\n                          <p>Waiting on host to start match.</p>\n                        ) : (\n                          <></>\n                        ))}\n                        <button className='wood' onClick={this.exitGame}>\n                          Exit Game\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Error Modal */}\n              <Modal className='errorModal' show={this.state.showModal}>\n                {/* Body */}\n                <Modal.Body className='modalBody'>\n                  <p>\n                    Looks like you haven't choosen a deck yet. Head to your\n                    profile and select \"Choose Deck\" to play!\n                  </p>\n                </Modal.Body>\n\n                {/* Footer */}\n                <Modal.Footer>\n                  <button\n                    className='btn btn-primary errorBtn'\n                    onClick={() => (window.location = '/Profile')}\n                  >\n                    Head to Profile\n                  </button>\n                </Modal.Footer>\n              </Modal>\n            </Container>\n          </div>\n        ) : (\n          <GameContext.Provider\n            value={{\n              socket: this.socket,\n              gameId: this.state.gameId,\n              deck: this.state.deck,\n              playerNumber: this.state.playerNumber\n            }}\n          >\n            <Gameboard />\n          </GameContext.Provider>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Lobby;\n","import React from 'react';\n\nimport Container from '../../components/Container/index';\nimport Navbar from '../../components/Navbar/index';\nimport './howtoplay.css'\n\nfunction HowToPlay() {\n    return (\n        <div>\n            <Navbar />\n            <h1 className=' cosHome animate__animated animate__slideInDown'>Change of Seasons</h1>\n            <Container>\n                <div>\n                    <p className='inline highlightR'>\n                    Getting started \n                    </p>\n                    <br></br>\n                        <p className='inline'>Create an account with us by </p><p className='inline highlightB'>signing up</p><p className='inline'> , or if you already have an account then make sure to<p  className='inline highlightB'> SIGN IN </p>. Once signed in, you should be directed to the Profile page.  \n                        </p>\n                        <br></br>\n                        <br></br>\n                        <p className='inline highlightR'> \n                        Create a match\n                        </p>\n                        <p> \n                        Once you have signed in, select a profile avatar and a deck you wish to play with. Push the Create Match option to create a match, you will be given a number in the middle of the screen. Relay that number to your friend so they can find your lobby. \n                        <br></br>\n                        <br></br>\n                        <p className='inline highlightR'> \n                        Join match\n                        </p>\n                        <p className='inline'>\n                        Joining a match is just as simple as creating one. Wait for your friend to create the match. Enter in the lobby number relayed to you, and click <p className='inline highlightB'> JOIN MATCH </p>. \n                        Once both opponents appear in the lobby, the User who created the game may press the</p><p className='inline highlightB'> START GAME </p><p>button. \n                        </p>\n                        <br></br>\n                        <p className='highlightR'>\n                        Playing the game\n                        </p>\n                        <p className='inline'>\n                        Each player starts with 5 cards in their hand, which is the maximum number of cards you can have in your hand at one time. You can play multiple cards at a time, as long as you have enough recourse points (located at the bottom of the screen.  \n                        </p>\n                        <br></br>\n                        <br></br>\n                        Each character card has a resource cost, attack power, and defense power: \n                        </p>\n                        <img src='./images/cardImg/cardDescription.png' alt='Picture of Card Description'></img>\n                        <br></br>\n                        <p>\n                        There are 3 playable slots in the ATTACK  ROW, and 2 playable slots in the defense row. The Attack Row may attack the opponent’s Attack Row or their Defensive Row. However, the Defensive Row may not attack.  \n                        When ready to play a card simply drag and drop the card of your choice into the respective slot that you want (if for some reason the card does not drop into the specified slot, it is not your turn or you cannot play that card in that position). \n                        <br></br>\n                        Damage to the cards will be dealt automatically. Any card that reaches 0 health, will be removed from the play area, and set to the players graveyard.   \n                        <br></br>\n                        At the beginning of your turn you gain 1 Resource. You are allowed to play as many cards you can per turn, but not required to.  \n                        When you are done with your turn, press the End Turn button at the top of the screen.  When your turn ends, you will gain 1 Resource.  \n                        <br></br>\n                        </p>\n                </div>\n            </Container>\n        </div >\n    )\n}\n\nexport default HowToPlay;","import React, {useEffect, useState} from 'react';\nimport ProtectedRoute from './components/ProtectedRoute'\nimport { getAuthLocally } from './utils/authentication'\nimport { useAuthContext } from './utils/GlobalState'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Homepage from './pages/Homepage/index';\nimport About from './pages/About/index';\nimport SignUp from './pages/Sign Up/index';\nimport Signin from './pages/Sign In/index';\nimport ForgotPassword from './pages/Forgot-Password/index';\nimport UserProfile from './pages/UserProfile/index';\nimport Lobby from './pages/Lobby/index'\nimport HowToPlay from './pages/HowToPlay/index'\n// TODO: Check out blank page when duplicating tabs\n\nfunction App() {\n    const [authLoading, setAuthLoading] = useState(true);\n    const [, setAuth] = useAuthContext();\n\n    useEffect(() => {\n        let auth = getAuthLocally();\n\n        if (auth){\n            setAuth(auth);\n        }\n\n        setAuthLoading(false);\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (authLoading) {\n        return null;\n    }\n    \n    return (\n\n        <Router>\n            <div>\n                <Switch>\n                    <Route exact path='/' component={Homepage}/>\n                    <Route exact path='/HowToPlay' component={HowToPlay}/>\n                    <Route exact path='/About' component={About}/>\n                    <Route exact path='/Signup' component={SignUp}/>\n                    <Route exact path='/Signin' component={Signin} />\n                    <Route exact path='/Forgot' component={ForgotPassword}/>\n                    <ProtectedRoute exact path = '/Profile' component = {UserProfile}/>\n                    <ProtectedRoute exact path = '/Lobby' component = {Lobby}/>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {AuthProvider} from './utils/GlobalState';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<AuthProvider><App /></AuthProvider>, document.getElementById('root'));"],"sourceRoot":""}